lib_prompt_refinement_level_1_1 = (
    "In order to prove the termination of a loop, we use the notion of loop variant. A loop variant "
    "is not a property but a value. It is an expression that involves the variables modified by the "
    "loop and that provides an upper bound to the number of iterations that remains to be executed "
    "by the loop before any iteration. Thus, this expression is greater or equals to 0, and strictly "
    "decreases at each loop iteration. "
    "You are a software engineer working on a safety-critical system. You are tasked with verifying the correctness of a "
    "loop in a given C program using Frama-C. "
    "I shall provide you with six artifacts - "
    "1. The source code of a loop from a C program "
    "delimited by the tags <loopcode> and </loopcode> 2. a unique loop identifer (positive integer) for the loop delimited by <loopid> and </loopid>. "
    "3. A loop variant generated by an LLM for the given loop in Frama-C ACSL notation delimited by the tags <variant> provided variant </variant>. "
    "4. A loop invariant generated by an LLM for the given loop in Frama-C ACSL notation delimited by the tags <invariant> provided invariant </invariant>. "
    "5. A assigns clause generated by an LLM for the given loop in Frama-C ACSL notation delimited by the tags <assigns> provided assigns </assigns>. "
    "6. A list of Frama-C WP goals and their status given "
    "delimited by the tags <framacwp> typed_test_fun_loop_variant_decrease=timeout </framacwp>, <framacwp> typed_test_fun_loop_variant_positive=timeout </framacwp>."
    "The goal status timeout is obtained from the Frama-C WP output after running the WP plugin on the given loop. "
    "You are to generate new loop variant, loop invariant, loop assigns clause for the given loop "
    "in Frama-C ACSL (ANSI/ISO C Specification Language) notation. "
    "Return only the loop id, new ACSL loop variant, new ACSL inductive loop invariant and a new assigns clause using the tags"
    "<loopid> id </loopid>, <variant> generated new variant </variant>, <invariant> generated new invariant </invariant>, <assigns> generated new assigns </assigns> "
    "and do not print anything else. "
    " If the invariant is a conjunction, use the string 'AND' to separate the conjuncts. "
    "Rules:"
    "**Do not use variables or functions that are not declared in the program.**"
    "**Do not make any assumptions about functions whose definitions are not given.**"
    "**All undefined variables contain garbage values. Do not use variables that have garbage values.**"
    "**Do not use keywords that are not supported in ACSL annotations for loops.**"
    "**Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**"
    "**Do not use the \at(x, Pre) notation for any variable x.**"
    "**Do not use non-deterministic function calls.**"
    "**Do not generate &gt, &lt for greater than and less than symbols. Use the symbols > and < directly.**"

)


lib_prompt_inv_1 = (
    "A loop invariant is a logical proposition that is valid at the head of a given loop, "
    "irrespective of how many times the loop has already, or will execute. Inductiveness of loop invariants further "
    "requires that one can prove its correctness just by looking at the loop body, not the rest of the program; "
    "further the invariant is strong enough to establish the property of interest."
    "To be considered an inductive loop invariant, a condition must satisfy the following properties:"
    "Initialization: The invariant must be true before the first iteration of the loop. This ensures that the invariant holds when the loop is first entered."
    "Maintenance: If the invariant holds before an iteration of the loop, it must also hold after the iteration is completed. This property ensures that the invariant is preserved through each execution of the loop body."
    "Termination: The invariant, together with the negation of the loop's termination condition, should be able to prove the correctness of the program after the loop terminates."
    "You are a software engineer working on a safety-critical system. You are tasked with verifying the correctness of a loop in the system. "
    "I shall provide you with three things - 1. a C program delimited using the tags <sourcecode> and </sourcecode>, "
    "2. the source code of a loop from the provided C program and given as "
    "delimited by the tags <loopcode> and </loopcode> and 3. a unique loop identifer (integer) for the loop delimited by <loopid> and </loopid>. "
    "You are to generate an inductive loop invariant for the given loop. "
    "Return only the loop id and inductive loop invariant using the tags"
    "<loopid> id </loopid> <invariant> generated invariant </invariant> "
    "and do not print anything else. "
)

# Prompt based on Loopy https://arxiv.org/pdf/2311.07948
lib_prompt_inv_2 = (
    "You are a helpful AI software assistant that reasons about how code behaves. Given a program, "
    "you can find loop invariants, which can then be used to verify some property in the program. "
    "Frama-C is a software verification tool for C programs. The input to Frama-C is a C program "
    "file with ACSL (ANSI/ISO C Specification Language) annotations. For the given program, find "
    "the necessary loop invariants of the while loop to help Frama-C verify the post-condition. "
    "Instructions:"
    "Make a note of the pre-conditions or variable assignments in the program."
    "Analyze the loop body and make a note of the loop condition."
    "Output loop invariants that are true"
    "(i) before the loop execution,"
    "(ii) in every iteration of the loop and"
    "(iii) after the loop termination,"
    "such that the loop invariants imply the post condition."
    "If a loop invariant is a conjunction, split it into its parts."
    "Return only the loop id and inductive loop invariant using the tags"
    "<loopid> id </loopid> <invariant> generated invariant </invariant> "
    "and do not print anything else."
    "Rules:"
    "**Do not use variables or functions that are not declared in the program.**"
    "**Do not make any assumptions about functions whose definitions are not given.**"
    "**All undefined variables contain garbage values. Do not use variables that have garbage values.**"
    "**Do not use keywords that are not supported in ACSL annotations for loops.**"
    "**Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**"
    "**Do not use the \at(x, Pre) notation for any variable x.**"
    "**Do not use non-deterministic function calls.**"
    "I shall provide you with three things - 1. a C program delimited using the tags <sourcecode> and </sourcecode>, "
    "2. the source code of a loop from the provided C program and given as "
    "delimited by the tags <loopcode> and </loopcode> and 3. a unique loop identifer (integer) for the loop delimited by <loopid> and </loopid>."
    "You are allowed to use implication to take care of the conditional nature of the code. Use "
    "implication (==>) instead of using if-then."
    "For all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist."
    "If a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation."
    "If the assertion is guarded by a condition, use the guard condition in an implication."
    "If certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location."
    "Output the loop invariants for the loop in the program above. Letâ€™s think step by step."
)


# Prompt based on Neural Termination Analysis https://arxiv.org/abs/2102.03824
lib_prompt_rank_1 = (
    "Termination analysis addresses the question of whether, for every possible input, a program halts. "
    "To argue that a program terminates one usually presents a ranking function for each loop in the program. "
    "Ranking functions map program states to values that (i) decrease by a discrete amount after "
    "every loop iteration and (ii) are bounded from below. They are "
    "certificates of termination: if a ranking function exists, then the "
    "program terminates for every possible input. "
    # "For example, for the C program - int x, y, z; while (x < y || x < z) {x++;} "
    # "a valid ranking function is f(x, y, z) = max{y-x, 0} + max{z-x, 0}. "
    "The existence of a "
    "ranking function proves that the program terminates, and every "
    "program that does not terminate necessarily lacks a ranking function. "
    "A standard way of giving a ranking function is to identify a "
    "function that maps states at loop headers to sequences of numbers "
    "that (i) decrease by a discrete amount and (ii) are bounded from "
    "below. Another way is to define tuples of functions that decrease "
    "lexicographically at loop headers, which is particularly useful for "
    "nested loops"
    "You are a software engineer working on a safety-critical system."
    "You are tasked with verifying the correctness of a loop in the system. "
    "I shall provide you with three things - 1. a C program delimited using the tags <sourcecode> and </sourcecode>, "
    "2. the source code of a loop from the provided C program and given as "
    "delimited by the tags <loopcode> and </loopcode> and 3. a unique loop identifer (integer) for the "
    "loop delimited by <loopid> and </loopid>. "
    "You are to generate a ranking function for the given loop. "
    "Return only the loop id and ranking function using the tags"
    "<loopid> id </loopid> <rankingfunction> generated ranking function </rankingfunction> "
    "and do not print anything else. "

)


lib_prompt_variant_1 = (
    "In order to prove the termination of a loop, we use the notion of loop variant. A loop variant "
    "is not a property but a value. It is an expression that involves the variables modified by the "
    "loop and that provides an upper bound to the number of iterations that remains to be executed "
    "by the loop before any iteration. Thus, this expression is greater or equals to 0, and strictly "
    "decreases at each loop iteration. Here is an example of an ACSL loop variant along with other invariants, asserts and assigns : "
    "int main(){"
    "int i = 0;int h = 42;"
    "/*@ "
    "loop invariant 0 <= i <= 30;"
    "loop assigns i;"
    "loop variant 30 - i;"
    "*/"
    "while(i < 30){"
    "++i;"
    "}"
    "//@assert i == 30;"
    "//@assert h == 42;"
    "}"
    "You are a software engineer working on a safety-critical system. You are tasked with verifying the correctness of a "
    "loop in a given C program using Frama-C. "
    "I shall provide you with three things - 1. a C program delimited using the tags <sourcecode> and </sourcecode>, "
    "2. the source code of a loop from the provided C program and given as "
    "delimited by the tags <loopcode> and </loopcode> and 3. a unique loop identifer (integer) for the loop delimited by <loopid> and </loopid>. "
    "You are to generate a Frama-C ACSL loop variant for the given loop. "
    "Return only the loop id and ACSL loop variant using the tags"
    "<loopid> id </loopid> <variant> generated variant </variant> "
    "and do not print anything else. "
)


lib_prompt_co_inv_assigns_variant_2 = (
    "In order to prove the termination of a loop, we use the notion of loop variant. A loop variant "
    "is not a property but a value. It is an expression that involves the variables modified by the "
    "loop and that provides an upper bound to the number of iterations that remains to be executed "
    "by the loop before any iteration. Thus, this expression is greater or equals to 0, and strictly "
    "decreases at each loop iteration. "
    "You are a software engineer working on a safety-critical system. You are tasked with verifying the correctness of a "
    "loop in a given C program using Frama-C. "
    "I shall provide you with three things - 1. a C program delimited using the tags <sourcecode> and </sourcecode>, "
    "2. the source code of a loop from the provided C program and given as "
    "delimited by the tags <loopcode> and </loopcode> and 3. a unique loop identifer (integer) for the loop delimited by <loopid> and </loopid>. "
    "You are to generate a Frama-C ACSL (ANSI/ISO C Specification Language) loop variant for the given loop. "
    "In addition generate an ACSL inductive loop invariant that helps Frama-C to prove the termination of the loop using the ACSL variant "
    "and the ACSL inductive loop invariant, where the ACSL inductive loop invariant is true"
    "(i) before the loop execution,"
    "(ii) given that the inductive loop invariant holds at the head of the loop, "
    "it also holds at the end of one more iteration of the loop"
    "Also generate an ACSL assigns clause that specifies the variables modified by the loop."
    "Return only the loop id, ACSL loop variant, ACSL inductive loop invariant and assigns caluse using the tags"
    "<loopid> id </loopid> <variant> generated variant </variant> <invariant> generated invariant </invariant> <assigns> generated assigns </assigns> "
    "and do not print anything else. "
    " If the invariant is a conjunction, use the string 'AND' to separate the conjuncts. "
    "Rules:"
    "**Do not use variables or functions that are not declared in the program.**"
    "**Do not make any assumptions about functions whose definitions are not given.**"
    "**All undefined variables contain garbage values. Do not use variables that have garbage values.**"
    "**Do not use keywords that are not supported in ACSL annotations for loops.**"
    "**Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**"
    "**Do not use the \at(x, Pre) notation for any variable x.**"
    "**Do not use non-deterministic function calls.**"
    "**Do not generate &gt, &lt for greater than and less than symbols. Use the symbols > and < directly.**"
)


# "Here is an example of a C program annotated with ACSL loop variant along with an inductive loop invariant and an assigns clause : "
# "\"int main(){"
# "int i = 0;int h = 42;"
# "/*@ "
# "loop invariant 0 <= i <= 30;"
# "loop assigns i;"
# "loop variant 30 - i;"
# "*/"
# "while(i < 30){"
# "++i;"
# "}"
# "//@assert i == 30;"
# "//@assert h == 42;"
# "}"


lib_prompt_instrument_acsl_1 = (
    " You are given the source code of a C program, the source code of a loop in this same program and an ACSL specification for the loop. "
    " The full C program source code is given between the tags <sourcecode> </sourcecode>. "
    " The loop source code is given between the tags <loopcode> </loopcode>. "
    " The ACSL specification for the loop is given between the tags <acsl> </acsl>. "
    " Add the ACSL specification to the source code of the provided C program just before the header of given loop in the given C program. "
    " Return the modified C program with the ACSL specification added. "
    " Return the modified C program between the tags <instrumented> </instrumented>."
)

lib_prompt_instrument_acsl_2_full_prog = (
    " Here is the source code of a C program - \n"
)
lib_prompt_instrument_acsl_2_loop = (
    " Here is the source code of a loop in the same C program - \n"
)

lib_prompt_instrument_acsl_2_acsl = (
    " Here is the ACSL specification for the loop - \n "
)

lib_prompt_instrument_acsl_2_imperative = (
    " Add the ACSL specification to the source code of the provided C program just before the header of given loop in the given C program. "
    " Do not make any other changes to the C program. "
    " Return the modified C program with only the ACSL specification added. "
    " Return the modified C program between the tags <instrumented> </instrumented>."

)
